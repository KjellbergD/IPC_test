#!/bin/bash
sender_output="sender_output.txt"
receiver_output="receiver_output.txt"
output_file="perf_data.perf"  # Output file name
pipe="pipe"

# Latency focused experiments
run_experiment_time() {
    local num_images=$1
    local test_type=$2

    # Run sender executable in background and capture output to file
    ./builddir/ipc_sender $test_type "1" $num_images > "$sender_output" &
    local sender_pid=$!

    # Run receiver executable in background and capture output to file
    ./builddir/ipc_receiver $test_type "1" > "$receiver_output" &
    local receiver_pid=$!
    #perf record -p "$receiver_pid" -g -o "$output_file"
    # Wait for both processes to finish
    wait "$sender_pid"
    wait "$receiver_pid"

    # Read send_time and receive_time from output files (in nanoseconds)
    local send_time=$(<"$sender_output")
    local receive_time=$(<"$receiver_output")

    # Calculate time difference (diff) in milliseconds with higher precision
    # Convert nanoseconds to milliseconds using floating-point arithmetic
    echo "scale=3; ($receive_time - $send_time) / 1000000" | bc
}

# Performance focused experiments
run_experiment_perf() {
    local num_images=$1
    local test_type=$2
    local test_num=$3

    # Run sender executable in background and capture output to file
    # Capture perf stat output to a temporary file
    perf stat -e cache-misses,cache-references,context-switches,cpu-cycles,instructions ./builddir/ipc_sender $test_type "0" $num_images > perf_sender_output.txt 2>&1 &
    local sender_pid=$!

    # Run receiver executable in background and capture output to file
    # Capture perf stat output to a temporary file
    perf stat -e cache-misses,cache-references,context-switches,cpu-cycles,instructions ./builddir/ipc_receiver $test_type "0" > perf_receiver_output.txt 2>&1 &
    local receiver_pid=$!

    # Wait for both processes to finish
    wait "$sender_pid"
    wait "$receiver_pid"
    # Extract and sum up each metric separately for sender and receiver
    local sender_values=($(grep -E 'cache-misses|cache-references|context-switches|cpu-cycles|instructions' perf_sender_output.txt | awk '{gsub(",", ""); print $1}'))
    local receiver_values=($(grep -E 'cache-misses|cache-references|context-switches|cpu-cycles|instructions' perf_receiver_output.txt | awk '{gsub(",", ""); print $1}'))

    local num_metrics=5
    local result="$test_type $num_images $test_num "

    for (( i = 0; i < num_metrics; i++ )); do
        local sum=$((sender_values[i] + receiver_values[i]))
        result+=$(printf "%'d" "$sum")" "
    done

    echo "${result% }" >> perf_experiment.txt  # Remove trailing space and print
}

run_experiment_top() {
    local num_images=$1
    local test_type=$2
    local test_num=$3

    local output_temp="top_output.txt"

    top -b -d 0.1  > $output_temp &
    top_pid=$!

    sleep 0.2

    # Run sender executable in background and capture output to file
    ./builddir/ipc_sender $test_type "0" $num_images &
    local sender_pid=$!

    # Run receiver executable in background and capture output to file
    ./builddir/ipc_receiver $test_type "0" &
    local receiver_pid=$!

    # Wait for both processes to finish
    wait "$sender_pid"
    wait "$receiver_pid"
    
    sleep 0.2

    kill $top_pid >/dev/null 2>&1
    wait $top_pid >/dev/null 2>&1

    # Extract memory usage from top output
    # Process the input file line by line
    cpu_snd="0.0"
    cpu_rcv="0.0"
    mem_snd="0.0"
    mem_rcv="0.0"
    mem_used="0.0"
    snd_read=false
    rcv_read=false
    i=0
    while IFS= read -r line; do
        if [[ $line =~ ^top ]]; then
            if [[ $i > 0 ]]; then
                echo "$test_type $num_images $test_num $i $cpu_snd $mem_snd $cpu_rcv $mem_rcv $mem_used" >> "top_experiment.txt"
                # Reset values in case the processes are not present
                cpu_snd="0.0"
                cpu_rcv="0.0"
                mem_snd="0.0"
                mem_rcv="0.0"
                snd_read=false
                rcv_read=false
            fi
            ((i++))
        fi
        if [[ $line =~ ipc_sender ]] && ! $snd_read; then
            cpu_snd=$(echo "$line" | awk '{print $9}')
            mem_snd=$(echo "$line" | awk '{print $10}')
            snd_read=true
        fi
        if [[ $line =~ ipc_receiver ]] && ! $rcv_read; then
            cpu_rcv=$(echo "$line" | awk '{print $9}')
            mem_rcv=$(echo "$line" | awk '{print $10}')
            rcv_read=true
        fi
        if [[ $line =~ "MiB Mem" ]]; then
            mem_used=$(echo "$line" | awk '{print $8}')
        fi
    done < $output_temp
    echo "$test_type $num_images $test_num $i $cpu_snd $mem_snd $cpu_rcv $mem_rcv $mem_used" >> "top_experiment.txt"
}

# Define temporary pipe for IPC
rm $pipe
mkfifo $pipe

# Experiment parameters
image_counts=(1 4 16 64 256 1024) # Array of image counts to test
types=("pipes" "shared" "queue")
reps=3

Run latency focused experiments
echo "type size latency(ms) throughput(MB/sec)" > "time_experiment.txt"
for type in "${types[@]}"; do
    echo "Running latency and throughput experiments for $type"
    # Loop over each number of images
    for num_images in "${image_counts[@]}"; do
        echo "  Using image size: $num_images MB"
        total_time=0
        # Run the experiment $reps amount of times for the current number of images
        for i in $(seq 1 $reps); do
            result=$(run_experiment_time $num_images $type)
            total_time=$(echo "$total_time + $result" | bc)
        done
        # Calculate the average time
        average_time=$(echo "scale=3; $total_time / $reps" | bc)
        throughput=$(echo "scale=4; ($num_images / $average_time) * 1000" | bc)
        # Average time in ms, and throughput in MB/sec
        echo "$type $num_images $average_time $throughput" >> "time_experiment.txt" 
    done
done

# Run performance focused experiments
echo "type size rep cache-misses cache-references context-switches cpu-cycles instructions" > "perf_experiment.txt"
for type in "${types[@]}"; do
    echo "Running perf experiments for $type"
    # Loop over each number of images
    for num_images in "${image_counts[@]}"; do
        echo "  Using image size: $num_images MB"
        # Run the experiment 50 times for the current number of images
        for i in $(seq 1 $reps); do 
            run_experiment_perf $num_images $type $i
        done
    done
done

# Run top focused experiments
echo "type size rep snapshot %CPU_snd %MEM_snd %CPU_rcv %MEM_rcv mem_used" > "top_experiment.txt"
for type in "${types[@]}"; do
    echo "Running top experiments for $type"
    # Loop over each number of images
    for num_images in "${image_counts[@]}"; do
        # Run the experiment 50 times for the current number of images
        echo "  Using image size: $num_images MB"
        for i in $(seq 1 $reps); do 
            run_experiment_top $num_images $type $i
        done
    done
done

# Clean up temporary files and pipe
rm "$sender_output" "$receiver_output" "$pipe"

echo "Done"